var searchDocuments = {"references/eClassifiers/Class/inheritance.html":{"path":"Class/Inheritance","link-uuid":"3aa097cb-b988-4955-87dd-e2638db7a7b1","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/Function/inheritance.html":{"path":"Function/Inheritance","link-uuid":"457fe8b4-062d-4e02-858f-f56ea8d5b45e","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/NamedElement/inheritance.html":{"path":"NamedElement/Inheritance","link-uuid":"b3f9b2d6-87af-47e8-839f-1d4951564e77","title":"Inheritance","content":"Supertypes Subtypes  "},"index.html":{"link-uuid":"1bc46b2b-944b-42a6-9e5e-3de3e729f3fa","title":"Python Model","content":"The Python model can be used for generation of Python code. It takes care of indentation and import management, which simplifies &ldquo;assembly&rdquo; of Python sources from multiple elements. Example PythonTests.java: CapabilityLoader capabilityLoader = new CapabilityLoader();\nProgressMonitor progressMonitor = new PrintStreamProgressMonitor();\nRequirement&lt;ResourceSetRequirement, ResourceSet&gt; requirement = ServiceCapabilityFactory.createRequirement(ResourceSet.class);\nResourceSet resourceSet = capabilityLoader.loadOne(requirement, progressMonitor);\n\nFile pythonFile = new File(&quot;target/test.py&quot;).getCanonicalFile();\nResource pythonResource = resourceSet.createResource(URI.createFileURI(pythonFile.getAbsolutePath()));\n\n// Class\nPythonFactory pythonFactory = PythonFactory.eINSTANCE;\nClass pClass = pythonFactory.createClass();\npClass.setName(&quot;LatestAiDevelopment&quot;);\npythonResource.getContents().add(pClass);\npClass.getDecorators().add(&quot;CrewBase&quot;);\nImport crewBaseImport = pythonFactory.createImport();\ncrewBaseImport.setModule(&quot;crewai.project&quot;);\ncrewBaseImport.setItem(&quot;CrewBase&quot;);\npClass.getImports().add(crewBaseImport);\n\norg.nasdanika.models.source.Source classDoc = org.nasdanika.models.source.Source.create(&quot;\\&quot;\\&quot;\\&quot;LatestAiDevelopment crew\\&quot;\\&quot;\\&quot;&quot;);\npClass.getBody().add(classDoc);\n\npClass.getBody().add(org.nasdanika.models.source.Source.create(\n&quot;&quot;&quot;\n\n# Learn more about YAML configuration files here:\n# Agents: https://docs.crewai.com/concepts/agents#yaml-configuration-recommended\n# Tasks: https://docs.crewai.com/concepts/tasks#yaml-configuration-recommended\nagents_config = 'config/agents.yaml'\n&quot;&quot;&quot;));\n\n// Variable\nVariable taskConfig = pythonFactory.createVariable();\ntaskConfig.setName(&quot;task_config&quot;);\ntaskConfig.setExpression(&quot;'config/tasks.yaml'&quot;);\npClass.getBody().add(taskConfig);\n\n// Function\nFunction researcherFunction = pythonFactory.createFunction();\norg.nasdanika.models.source.Source researcherFunctionBody = org.nasdanika.models.source.Source.create(\n\t&quot;&quot;&quot;\n\treturn Agent(\n\t\tconfig=self.agents_config['researcher'],\n\t\tverbose=True\n\t)\n\t&quot;&quot;&quot;);\n\nresearcherFunction.getBody().add(researcherFunctionBody);\nresearcherFunction.setAnnotation(&quot;Agent&quot;);\n\nresearcherFunction.setName(&quot;researcher&quot;);\nresearcherFunction.getParameters().add(&quot;self&quot;);\n\nresearcherFunction.getDecorators().add(&quot;agent&quot;);\nImport crewAgentImport = pythonFactory.createImport();\ncrewAgentImport.setModule(&quot;crewai&quot;);\ncrewAgentImport.setItem(&quot;Agent&quot;);\nresearcherFunction.getImports().add(crewAgentImport);\n\nImport agentImport = pythonFactory.createImport();\nagentImport.setModule(&quot;crewai.project&quot;);\nagentImport.setItem(&quot;agent&quot;);\nresearcherFunction.getImports().add(agentImport);\n\npClass.getBody().add(researcherFunction);\n\npythonResource.save(null);\n\n Output: from crewai import Agent\nfrom crewai.project import CrewBase, agent\n@CrewBase\nclass LatestAiDevelopment:\n    &quot;&quot;&quot;LatestAiDevelopment crew&quot;&quot;&quot;\n\n    # Learn more about YAML configuration files here:\n    # Agents: https://docs.crewai.com/concepts/agents#yaml-configuration-recommended\n    # Tasks: https://docs.crewai.com/concepts/tasks#yaml-configuration-recommended\n    agents_config = 'config/agents.yaml'\n    task_config = 'config/tasks.yaml'\n    @agent\n    def researcher(self) -&gt; Agent:\n        return Agent(\n        \tconfig=self.agents_config['researcher'],\n        \tverbose=True\n        )"},"references/eClassifiers/Variable/inheritance.html":{"path":"Variable/Inheritance","link-uuid":"b128393b-b044-4b01-b47f-7affd1ea8b9a","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/Source/inheritance.html":{"path":"Source/Inheritance","link-uuid":"e9b1bee3-0f3e-44f1-9f15-9b55a9599e97","title":"Inheritance","content":"Supertypes Subtypes  "}}